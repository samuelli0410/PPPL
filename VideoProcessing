import sys
from pathlib import Path
import csv
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation 
import os
import imageio
from tqdm import tqdm
import torch
csv.field_size_limit(sys.maxsize)
project_root = Path(__file__).parent.parent
data_dir = project_root / "data"
sys.path.append(str(project_root))
sav_files_dir = data_dir / "all"
from data.file_utils import GetEmission
from working_dir.EncoderTrain import Autoencoder


em = GetEmission(file_path=sav_files_dir)
files = em.list_files(display=True)


def generate_Videos(modelWeights, model = Autoencoder, FileNumber = 0):
    os.makedirs("frames", exist_ok=True)
    inverted, radii, elevation, frames, times, vid_frames, vid_times, vid = em.load_all(files[FileNumber])
    
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model=model().to(device)
    model.load_state_dict(torch.load(modelWeights, map_location=device))
    model.eval()
    
    count = 0
    for j in tqdm(frames, desc="Generating Frames"):
        j = int(j)
        # framesInverted.append([vid[j].tolist(), inverted[count].tolist()])
        test_input = vid[j]
        ground_truth = inverted[count]
        test_input = test_input / test_input.max()
        test_tensor = torch.tensor(test_input, dtype=torch.float32).unsqueeze(0).unsqueeze(0)
        test_tensor = test_tensor.repeat(1, 3, 1, 1)
        with torch.no_grad():
            test_output = model(test_tensor.to(device))
            test_output = test_output.squeeze().cpu().numpy()
        

        plt.subplot(1,3,2)
        plt.title(f"Inverted {j}")
        plt.imshow(ground_truth, cmap='inferno')
        plt.colorbar()


        plt.subplot(1,3,1)
        plt.title(f"Cam Image {j}")
        plt.imshow(test_input, cmap='inferno')
        plt.colorbar()


        plt.subplot(1,3,3)
        plt.title(f"Generated Inversion {j}")
        plt.imshow(test_output, cmap='inferno')
        plt.colorbar()

        plt.savefig(f"frames/frame_{count:03d}.png")
        plt.close()





        count +=1

    with imageio.get_writer("/scratch/gpfs/sl4318/Outputs/output_video.mp4", fps=10) as writer:
        for i in range(count):
            filename = f"frames/frame_{i:03d}.png"
            image = imageio.imread(filename)
            writer.append_data(image)

    print("Video saved as output_video.mp4")

    





if __name__ == "__main__":
    generate_Videos("/scratch/gpfs/sl4318/ResNetSRCNN.pth")